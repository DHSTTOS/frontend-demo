@startuml
title GUI Overview

class DataStore << (S,Yellow) state store >> {
  ==observables==
  # data
  # availableRange
  # currentRanges
  ==computed==
  # neededRanges
  ==actions==
  # updateCurrentRangeTo(start, end)
  - pullData()
}

class UIStore << (S,Yellow) state store >> {
  ==observables==
  # userDetails

  # diagramConfigs
  # diagramConfigModal
  # isDiagramConfigModalActive
  # sourcesAvailable

  # globalFilters
  ==actions==
  # logout()
  # newDiagram()
  
  # resetDiagramConfigs()
  # updateDiagramConfigs(origDiagConf, newValsForOverride)
  # resetGlobalFilters()
  # updateGlobalFilters(category, name)
}

class App << (C,red) container >> {
}

class ControlPanel << (C,red) container >> {
}

class GlobalFilters << (C,red) container >> {
}

class GlobalFilter << (C,pink) component observer >> {
  ~ UIStore
  ==props==
  category
  name
  ==actions==
  updateGlobalFilters(category, name)
}

class UserController << (C,pink) component observer >> {
  ~ UIStore
  ==props==
  userDetails
  ==actions==
  logout()
}

class DiagramConfigsModal << (C,red) container observer >> {
  ~ UIStore
  ==props==
  isDiagramConfigModalActive
}

class GenericConfigs << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore
  ==props==
  sourcesAvailable
  diagramType
  axisChoices
  useColor
  colorBy
  enableLegends
  enableTooltip
  enableAnimation
  diagramType
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class DiagramSpecificConfigs << (C,red) container >> {
}

class TimeLinePlotConfigs  << (C,pink) component observer >> {
  ~ UIStore
  ==props==
  lineWidth
  lineOpacity
  enablePoints
  enableShapedPoints
  pointSize
  pointOpacity
  enableArea
  areaOpacity
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class ScatterPlotConfigs  << (C,pink) component observer >> {
  ~ UIStore
  ==props==
  enableShapedPoints
  pointSize
  pointOpacity
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class NetworkPlotConfigs  << (C,pink) component observer >> {
  ~ UIStore
  ==props==
  lineWidth
  lineOpacity
  enableShapedPoints
  pointSize
  pointOpacity
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class Brush << (C,pink) component observer >> {
  ~ DataStore
  ==props==
  availableRange
  currentRanges
  ==action==
  updateCurrentRangeTo(start, end)
}

class Diagrams << (C,red) container >> {
}

class Plot << (C,red) container >> {
}

class TimeLinePlot  << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore

  - zoomLevel
  - isMaximized
  ==props==
  lineWidth
  lineOpacity
  enablePoints
  enableShapedPoints
  pointSize
  pointOpacity
  enableArea
  areaOpacity
}

class ScatterPlot  << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore

  - zoomLevel
  - isMaximized
  ==props==
  enableShapedPoints
  pointSize
  pointOpacity
}

class NetworkPlot  << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore

  - zoomLevel
  - isMaximized
  ==props==
  lineWidth
  lineOpacity
  enableShapedPoints
  pointSize
  pointOpacity
}

class DiagramControl << (C,pink) component >> {
  ==actions==
  configureDiagram()
  configureFilters()
  maximize()
  dispose()
}

class Footer << (C,red) container >> {
}

class NewDiagramButton << (C,pink) component >> {
  ==actions==
  newDiagram()
}
@enduml
