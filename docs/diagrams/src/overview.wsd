@startuml
title GUI Overview

interface DiagramConfigObject << (T,brown) type >> {
  id: number
  sourcesAvailable: enum
  diagramType: enum
  axisChoices: enum
  useColor: bool
  colorBy: enum
  enableLegends: bool
  enableTooltip: bool
  enableAnimation: bool
  diagramType: enum

  diagramSpecificConfig: DiagramSpecificConfigObject
}

interface DiagramSpecificConfigObject << (T,brown) type >> {
}

interface TimeLinePlotConfigObject << (T,brown) type >> {
  lineWidth: number
  lineOpacity: number
  enablePoints: bool
  enableShapedPoints: bool
  pointSize: number
  pointOpacity: number
  enableArea: bool
  areaOpacity: number
}

interface ScatterPlotConfigObject << (T,brown) type >> {
  enableShapedPoints: bool
  pointSize: number
  pointOpacity: number
}

interface NetworkConfigObject << (T,brown) type >> {
  lineWidth: number
  lineOpacity: number
  enableShapedPoints: bool
  pointSize: number
  pointOpacity: number
}

interface DataPoint << (T,brown) type >> {
  L2Protocol: string
  SourceMACAddress: string
  L4Protocol: string
  SourceIPAddress: string
  PacketSummary: string
  PacketID: number
  DestinationIPAddress: string
  Timestamp: number
  DestinationPort: string
  SourcePort: number
  L3Protocol: string
  DestinationMACAddress: string
}

interface UserDetails << (T,brown) type >> {
  userName: string
  basicAuthToken: string
}

interface GlobalFilterObject << (T,brown) type >> {
  category: string
  name: string
  value: bool
}

class DataStore << (S,Yellow) state store >> {
  ==observables==
  # data: List<DataPoint>
  # availableRange: Tuple<number, number>
  # currentRanges: List<Tuple<number, number>>
  ==computed==
  # neededRanges: List<Tuple<number, number>>
  ==actions==
  # updateCurrentRangeTo(start, end)
  - pullData()
}

class UIStore << (S,Yellow) state store >> {
  ==observables==
  # userDetails: UserDetails

  # diagramConfigs: List<DiagramConfigObject>
  # diagramConfigModal: DiagramConfigObject
  # isDiagramConfigModalActive: bool
  # sourcesAvailable: enum

  # globalFilters: List<GlobalFilterObject>
  ==actions==
  # logout()
  # newDiagram()

  # resetDiagramConfigs()
  # updateDiagramConfigs(origDiagConf, newValsForOverride)
  # resetGlobalFilters()
  # updateGlobalFilters(category, name, value)
}

class App << (C,red) container >> {
}

class ControlPanel << (C,red) container >> {
}

class GlobalFilters << (C,red) container >> {
}

class GlobalFilter << (C,pink) component observer >> {
  ~ UIStore
  ==observes==
  ~ globalFilters
  ==props==
  category
  name
  ==actions==
  updateGlobalFilters(category, name)
}

class UserController << (C,pink) component observer >> {
  ~ UIStore
  ==observes==
  ~ userDetails
  ==props==
  userDetails
  ==actions==
  logout()
}

class DiagramConfigsModal << (C,red) container observer >> {
  ~ UIStore
  ==observes==
  ~ diagramConfigModal
  ~ isDiagramConfigModalActive
  ==props==
  isDiagramConfigModalActive
}

class GenericConfigs << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore
  ==observes==
  ~ sourcesAvailable
  ~ diagramConfigModal
  ==props==
  sourcesAvailable
  diagramType
  axisChoices
  useColor
  colorBy
  enableLegends
  enableTooltip
  enableAnimation
  diagramType
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class DiagramSpecificConfigs << (C,red) container >> {
}

class TimeLinePlotConfigs  << (C,pink) component observer >> {
  ~ UIStore
  ==observes==
  ~ diagramConfigModal
  ==props==
  lineWidth
  lineOpacity
  enablePoints
  enableShapedPoints
  pointSize
  pointOpacity
  enableArea
  areaOpacity
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class ScatterPlotConfigs  << (C,pink) component observer >> {
  ~ UIStore
  ==observes==
  ~ diagramConfigModal
  ==props==
  enableShapedPoints
  pointSize
  pointOpacity
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class NetworkPlotConfigs  << (C,pink) component observer >> {
  ~ UIStore
  ==observes==
  ~ diagramConfigModal
  ==props==
  lineWidth
  lineOpacity
  enableShapedPoints
  pointSize
  pointOpacity
  ==actions==
  updateDiagramConfigs(origDiagConf, newValsForOverride)
}

class Brush << (C,pink) component observer >> {
  ~ DataStore
  ==observes==
  ~ availableRange
  ~ currentRanges
  ==props==
  availableRange
  currentRanges
  ==action==
  updateCurrentRangeTo(start, end)
}

class Diagrams << (C,red) container >> {
}

class Plot << (C,red) container >> {
}

class TimeLinePlot  << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore

  - zoomLevel
  - isMaximized
  ==observes==
  ~ data
  ~ diagramConfigs
  ==props==
  lineWidth
  lineOpacity
  enablePoints
  enableShapedPoints
  pointSize
  pointOpacity
  enableArea
  areaOpacity
}

class ScatterPlot  << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore

  - zoomLevel
  - isMaximized
  ==observes==
  ~ data
  ~ diagramConfigs
  ==props==
  enableShapedPoints
  pointSize
  pointOpacity
}

class NetworkPlot  << (C,pink) component observer >> {
  ~ DataStore
  ~ UIStore

  - zoomLevel
  - isMaximized
  ==observes==
  ~ data
  ~ diagramConfigs
  ==props==
  lineWidth
  lineOpacity
  enableShapedPoints
  pointSize
  pointOpacity
}

class DiagramControl << (C,pink) component >> {
  ==actions==
  configureDiagram()
  configureFilters()
  maximize()
  dispose()
}

class Footer << (C,red) container >> {
}

class NewDiagramButton << (C,pink) component >> {
  ==actions==
  newDiagram()
}

@enduml
